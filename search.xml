<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Leetcode-188 买卖股票的最佳时机 IV</title>
    <url>/leetcode-188/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/">题目链接</a></h3><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。</p>
<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。</p>
<p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>要注意一次 <code>买入-卖出</code> 为一次交易，而不是两次，也可以简化为，每次卖出，才算交易，因为，如果只是买入，不卖出，肯定是亏的，所以直接在卖出时计算交易就行了，之前被这个坑了</p>
<p>整体动态规划的思路<br>empty[i][j] 代表 前i天，进行j次交易，最后空仓状态时，最大的收益<br>full[i][j] 代表 前i天，进行j次交易，最后满仓状态时，最大的收益<br>转移方程为</p>
<p>full[i][j] = max(full[i-1][j],empty[i-1][j] - price[i]) </p>
<p>满仓状态可以是从前一天满仓转移过来，或者从前一天的空仓购买当天的股票转移过来</p>
<p>empty[i][j] = max(empty[i-1][j],full[i-1][j-1] + price[i])</p>
<p>空仓状态可以是从前一天的空仓转移过来，或者从前一天的满仓，在今天卖出股票转移过来</p>
<p>要注意的是，最后的结果是  empty[prices.length-1][0…k] 的最大值，因为不一定操作次数越多收益越大，如果是完全递减的数组，不操作的收益是最大的。</p>
<p>然后是初始条件</p>
<p>empty[0][0] = 0;<br>full[0][0] = -prices[0];<br>第一天满仓的收益是 -prices[0] 即在第一天购入股票，第一天空仓的收益是0；</p>
<p>full[0][1…k] = Integer.MIN_VALUE &gt;&gt; 1 ,第一天不能卖出，所以其他的初始值设置为极小的非法值，但是因为后续可能进行减操作，所以最好右移一位，也就是除2</p>
<p>full[i][0] = Math.max(full[i-1][0], empty[i-1][0] - prices[i]);这个和转移方程基本是一样的，只是不能-1了</p>
<p>另外，题目中 K 可以到1e9， 但是一次交易至少要两天才有意义，当天买卖收益为0，毫无意义，所以最多进行 prices.length/2 次操作，这样k的最大值就只有 500 了，</p>
<p>另另外，full和empty的状态转移只和上一次的状态相关，所以可以用滚动数组压缩空间。</p>
<h3 id="代买"><a href="#代买" class="headerlink" title="代买"></a>代买</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = prices.length;</span><br><span class="line">        k = Math.min(k, len / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span>[][] full = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][k + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[][] empty = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][k + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        full[<span class="number">0</span>][<span class="number">0</span>] = -<span class="number">1</span> * prices[<span class="number">0</span>];</span><br><span class="line">        empty[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= k  ; i++)&#123;</span><br><span class="line">            full[<span class="number">0</span>][i] = Integer.MIN_VALUE &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; len ; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = i % <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> last = (i-<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">            full[cur][<span class="number">0</span>] = Math.max(full[last][<span class="number">0</span>], empty[last][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= k ; j ++)&#123;</span><br><span class="line">                full[cur][j] = Math.max(full[last][j], empty[last][j] - prices[i]);</span><br><span class="line">                empty[cur][j] = Math.max(empty[last][j], full[last][j-<span class="number">1</span>] + prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= k ; i++)&#123;</span><br><span class="line">            res = Math.max(res, empty[(len-<span class="number">1</span>)%<span class="number">2</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-205  同构字符串</title>
    <url>/leetcode-205/</url>
    <content><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://leetcode-cn.com/problems/isomorphic-strings/">题目链接</a></h3><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定两个字符串 s 和 t，判断它们是否是同构的。</p>
<p>如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。</p>
<p>所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>简单哈希表就行，逐个字符扫过去，如果没有映射就建立映射，如果有映射，就检验映射的字符和看到的字符是不是同一个，不是直接返 <code>false</code><br>注意 映射是双向的,而且s和t中的映射可能不一致，所以需要维护两个映射 一个是 s-&gt;t 一个是 t-&gt;s</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIsomorphic</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span>[] mapst = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">int</span>[] mapts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; s.length() ; i ++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sidx = s.charAt(i)-<span class="string">&#x27; &#x27;</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> tidx = t.charAt(i)-<span class="string">&#x27; &#x27;</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>((mapst[sidx] != <span class="number">0</span> &amp;&amp; mapst[sidx] != tidx) || (mapts[tidx] != <span class="number">0</span> &amp;&amp; mapts[tidx] != sidx))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mapst[sidx] = tidx;</span><br><span class="line">            mapts[tidx] = sidx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces 691A. Fashion in Berland （模拟）</title>
    <url>/old/Codeforces-691A-Fashion-in-Berland/</url>
    <content><![CDATA[<p><a href="http://codeforces.com/contest/691/problem/A">题目链接</a></p>
<h2 id="简单题意"><a href="#简单题意" class="headerlink" title="简单题意"></a>简单题意</h2><p>给一串0和1，要求有且只有一个0，如果只有一个数，则必须为1</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>简单模拟就好<br><strong>Python大法好~~~</strong></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;YES&#x27;</span> <span class="keyword">if</span> <span class="built_in">min</span>(<span class="number">1</span>,<span class="built_in">int</span>(<span class="built_in">input</span>())-<span class="number">1</span>) == <span class="built_in">input</span>().split().count(<span class="string">&#x27;0&#x27;</span>) <span class="keyword">else</span> <span class="string">&#x27;NO&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>CPP</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        sum += m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n-sum == min(<span class="number">1</span>,n<span class="number">-1</span>)) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces 691F. Couple Cover （暴力）</title>
    <url>/old/Codeforces-691F/</url>
    <content><![CDATA[<p><a href="http://codeforces.com/problemset/problem/691/F">题目链接</a></p>
<h3 id="简单题意"><a href="#简单题意" class="headerlink" title="简单题意"></a>简单题意</h3><p>给出一个序列，和一些询问，每个询问包含一个整数q，问序列中乘积不小于q的数对有多少对</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>（代码更容易看懂）<br>因为q最多是3e6，所以只要统计一下序列中哪些数出现过，出现过多少次，然后用一个二重循环i j遍历1 -&gt; 3e6，当i<em>j &gt; 3e6 时 break ，这样可以统计出，乘积为 i</em>j 的数对个数，再做一个累加，就可以的到乘积小于等于i*j的有多少个。可证这个复杂度是</p>
<img src="https://i.loli.net/2020/12/25/c6jEwRsHvB13rAz.png" width="50%" height="50%">


<p>然后对输入查表，用总数减去乘积小于q的数量就得到答案。</p>
<p>PS：也可以先读入数据，i*j 只遍历到询问中最大的那个数，可能会快一点，但是要一个额外的数组来存询问。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span>+<span class="number">10</span>;</span><br><span class="line">ll num[maxn];</span><br><span class="line">ll sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%I64d&quot;</span>, &amp;n);</span><br><span class="line">    ll ma = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%I64d&quot;</span>,&amp;m);</span><br><span class="line">        num[m]++;</span><br><span class="line">        ma = max(ma,m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= ma ; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= ma; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1L</span>L*i*j &gt; <span class="number">3e6</span>) <span class="keyword">break</span>;</span><br><span class="line">            sum[i*j] += num[i] * num[j];</span><br><span class="line">            <span class="keyword">if</span>(i == j) sum[i*j] -= num[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; maxn ; i ++) sum[i] += sum[i<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%I64d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i ++)&#123;</span><br><span class="line">        ll tmp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%I64d&quot;</span>, &amp;tmp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%I64d\n&quot;</span>, n*(n<span class="number">-1</span>) - sum[tmp<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces 696B. Puzzles （概率DP求期望）</title>
    <url>/old/Codeforces-696B/</url>
    <content><![CDATA[<p><a href="http://codeforces.com/problemset/problem/696/B">题目链接</a></p>
<h3 id="简单题意"><a href="#简单题意" class="headerlink" title="简单题意"></a>简单题意</h3><p>访问一颗树，在节点上记录访问时间，每次对儿子节点的访问是随机的，问每个节点被访问时间的期望</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>很显然，如果先访问了兄弟节点，则会把兄弟节点的子树全部访问完成后再来下一次选择。所以要记录一下每个节点中子节点的个数，这个很简单，直接倒着扫一遍邻接表就累加行了。有了子节点的个数，我们还需要得到某一个节点先于其他节点被选择的概率，是0.5</p>
<p>简单说明一下，例如某个节点有a,b,c,d四个子节点，则可能产生24种排列，在所有的排列中，任意一点先于另外一点的概率是0.5，所以对于任意一个点，他先于另外某一个点被访问的概率是0.5。</p>
<p>没有被选中额外花费的时间为父亲的所有子节点数，减去当前节点及其子节点数。</p>
<p>所以得到转移方程为（i是父亲节点，to是儿子结点）<br>ans[to] = ans[i] + 1 + (sz[i]-1-sz[to]) * 0.5</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pos,tree,ans,sz = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())) <span class="keyword">if</span> n &gt; <span class="number">1</span> <span class="keyword">else</span> [],[],[],[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">  tree.append([])</span><br><span class="line">  ans.append(<span class="number">0.0</span>)</span><br><span class="line">  sz.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">  tree[pos[i]-<span class="number">1</span>].append(i+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)[::-<span class="number">1</span>]:</span><br><span class="line">  sz[i] = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> to <span class="keyword">in</span> tree[i]:</span><br><span class="line">    sz[i] += sz[to]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">  <span class="keyword">for</span> to <span class="keyword">in</span> tree[i]:</span><br><span class="line">    ans[to] = ans[i] + <span class="number">1</span> + (sz[i]-<span class="number">1</span>-sz[to]) * <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">st = <span class="keyword">lambda</span> i: <span class="built_in">str</span>(i+<span class="number">1</span>)</span><br><span class="line">print(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(st,ans))))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces 700B Connecting Universities（DFS）</title>
    <url>/old/Codeforces-700B-Connecting-Universities(DFS)/</url>
    <content><![CDATA[<p><a href="http://codeforces.com/problemset/problem/700/B">题目链接</a></p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一颗数，树的边权为1，树上的有些节点有大学，现在要把这些大学配对，每对大学之间都要链接线缆，问最多要链接多长的线缆。</p>
<p>图示<br>以第一组样例为例：<br><img src="https://img-blog.csdnimg.cn/img_convert/4f89c9b5461266758f6200be1dead361.png" alt="图示"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>和多校第一场的A题很像，直接dfs去计数每个节点的子节点包含有多少个大学，这样就可以算出每条边的两边有多少大学。<br>在每条边上能建立的最多的线缆数就是：两端点的子树中包含的大学数量中，较小的那一个。即是说包含较少的大学的端点的子树中的大学都和另外一边的大学配对。对每条边都这样统计一下，求和就是答案</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>基本就是从多校第一场的A题改出来的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edges</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">&#125;edge[maxm];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> from)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; G[cur].size() ; i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = G[cur][i];</span><br><span class="line">        <span class="keyword">if</span>(v == from) <span class="keyword">continue</span>;</span><br><span class="line">        cnt[cur] += dfs(v,cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[cur];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= k*<span class="number">2</span> ; i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;tmp);</span><br><span class="line">        cnt[tmp] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n<span class="number">-1</span> ; i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u,&amp;v);</span><br><span class="line">        edge[i].u = u;</span><br><span class="line">        edge[i].v = v;</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    ll <span class="built_in">exp</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n<span class="number">-1</span> ; i ++)&#123;</span><br><span class="line">        Edges &amp; e = edge[i];</span><br><span class="line">        <span class="keyword">int</span> tt = min(cnt[e.u],cnt[e.v]);</span><br><span class="line">        <span class="keyword">int</span> tmp = min(<span class="number">2</span>*k-tt,tt);</span><br><span class="line">        <span class="built_in">exp</span> += tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%I64d\n&quot;</span>,<span class="built_in">exp</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces 701C They Are Everywhere（尺取/双指针）</title>
    <url>/old/Codeforces-701C-They-Are-Everywhere(%E5%8F%8C%E6%8C%87%E9%92%88)/</url>
    <content><![CDATA[<p><a href="http://codeforces.com/problemset/problem/701/C">题目链接</a></p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一排临街的房子，相邻房子之间可以直接移动到，只能选择一个地方从街上进入房子里，也只能出来一次，问找到所有种类 Pokemon的最少要访问几个房子</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>很明显就是要找出一个包含所有种类字符的最短的子区间，直接尺取扫一遍，记录一下最小区间长度就行了，很标准的尺取法。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; M;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)&#123;</span><br><span class="line">        M[str[i]] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num = M.size();</span><br><span class="line">    M.clear();</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span> ,r = <span class="number">0</span>;</span><br><span class="line">    M[str[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(r &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">while</span>(cnt &lt; num)&#123;</span><br><span class="line">            r++;</span><br><span class="line">            <span class="keyword">if</span>(r &gt;= n)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(!M[str[r]])&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            M[str[r]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(cnt &gt;= num)&#123;</span><br><span class="line">            ans = min(ans,r-l+<span class="number">1</span>);</span><br><span class="line">            M[str[l]]--;</span><br><span class="line">            <span class="keyword">if</span>(!M[str[l]])&#123;</span><br><span class="line">                cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
        <tag>two points</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+GithubPages 部署个人博客</title>
    <url>/yuque/Hexo+GithubPages%20%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="1-缘起"><a href="#1-缘起" class="headerlink" title="1. 缘起"></a>1. 缘起</h2><p>之前还在学校里的时候，在 ACM 集训队中偶尔写过一些题解，发布在 CSDN 的博客上，后来 CSDN 改来改去，以及各种各样的原因，不想在第三方的博客平台发布了，就有了自己搭建一个个人博客站点的想法。一开始设想是购买个服务器自己搭 Wordpress 的，后来看了几篇文章以后发现 Github Pages 之类的静态页面就可以满足我基本的需求了，使用 hexo 之类的静态站点生成工具也可以很方便的以后迁移到自己的服务器上。<br>所以最后的方案就确定是 Hexo + Github Pages 了</p>
<h2 id="2-准备"><a href="#2-准备" class="headerlink" title="2. 准备"></a>2. 准备</h2><h3 id="2-1-Hexo-的准备"><a href="#2-1-Hexo-的准备" class="headerlink" title="2.1 Hexo 的准备"></a>2.1 Hexo 的准备</h3><blockquote>
<p>“快速、简洁且高效的博客框架” – hexo.io</p>
</blockquote>
<p><a href="https://hexo.io/">Hexo </a> 是基于 Node.js 的 一个快速高效的博客框架，支持从 markdown 生成页面，同时有丰富的第三方插件和主题支持。</p>
<h4 id="2-2-1-依赖安装"><a href="#2-2-1-依赖安装" class="headerlink" title="2.2.1 依赖安装"></a>2.2.1 依赖安装</h4><p>前置要求 <code>Git</code> 、 <code>NodeJs</code> <br>这两个的安装就不在这里多做赘述了，直接参考官网或者其他博客即可。<br><a href="https://nodejs.org/zh-cn/">NodeJs 官网</a><br><a href="https://git-scm.com/">Git 官网</a></p>
<h4 id="2-1-2-Hexo-安装"><a href="#2-1-2-Hexo-安装" class="headerlink" title="2.1.2 Hexo 安装"></a>2.1.2 Hexo 安装</h4><p>安装完上述依赖以后，直接执行下面的命令即可安装 Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h4 id="2-1-3-初始化站点"><a href="#2-1-3-初始化站点" class="headerlink" title="2.1.3 初始化站点"></a>2.1.3 初始化站点</h4><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p>需要关心以下几个文件/文件夹</p>
<h5 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h5><p>网站的配置信息，在此配置大部分的参数。</p>
<h5 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h5><p>模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>Hexo 的模板是指在新建的文章文件中默认填充的内容。例如，如果修改 scaffold/post.md 中的 Front-matter 内容，那么每次新建一篇文章时都会包含这个修改。</p>
<h5 id="source"><a href="#source" class="headerlink" title="source"></a>source</h5><p>资源文件夹是存放用户资源的地方。除 <code>_post</code>  文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code>  文件夹，而其他文件会被拷贝过去。</p>
<h5 id="theme"><a href="#theme" class="headerlink" title="theme"></a>theme</h5><p>主题文件夹。Hexo 会根据主题来生成静态页面。</p>
<p>现在，在文件夹下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s  <span class="comment">#s 是server的缩写</span></span><br></pre></td></tr></table></figure>

<p>然后打开 <a href="http://localhost:4000/">http://localhost:4000</a> 应该可以看到默认的站点页面了 如下图<br><img src="https://i.loli.net/2020/12/25/dAVIzlkuHpa7Lvq.png"><br>我这个是使用了 next 的主题，默认和这个会有所不同，只要能正常看到页面，就算正常。</p>
<p>至此 一个 Hexo 的本地站点就已经搭建完成了，接下来就是要配置 Github Pages / 其他静态页面容器用于部署博客了</p>
<h4 id="2-1-4-站点基本信息配置"><a href="#2-1-4-站点基本信息配置" class="headerlink" title="2.1.4 站点基本信息配置"></a>2.1.4 站点基本信息配置</h4><p>站点基本信息配置，在站点的 <code>_config.yml</code>  中修改基本信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Shufu&#x27;s</span> <span class="string">Graffiti</span>  <span class="comment">#站点名称</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span>  <span class="comment"># 子标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;Recoding &amp; Reminding&#x27;</span> <span class="comment"># 描述</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">***</span> <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span> <span class="comment">#语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> <span class="string">时区</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-2-Github-Pages-的准备"><a href="#2-2-Github-Pages-的准备" class="headerlink" title="2.2 Github Pages 的准备"></a>2.2 Github Pages 的准备</h3><p>这里以 Github Pages 为例，但是使用 Coding 或者 Gitee 的类似服务也是类似的流程</p>
<h4 id="2-2-1-注册账号"><a href="#2-2-1-注册账号" class="headerlink" title="2.2.1 注册账号"></a>2.2.1 注册账号</h4><p>注册一个 github 账号，过程略</p>
<h4 id="2-2-2-创建一个博客仓库"><a href="#2-2-2-创建一个博客仓库" class="headerlink" title="2.2.2 创建一个博客仓库"></a>2.2.2 创建一个博客仓库</h4><p>新建仓库，如果要想直接用 <code>&lt;用户名&gt;.github.io</code>  访问的话，仓库名就要是 <code>&lt;用户名&gt;.github.io</code>  但是考虑到未来可能会迁移到个人服务器上，所以我自己还是用子目录的形式访问的 即随意填写仓库名 使用 <code>&lt;用户名&gt;.github.io/仓库名的形式访问</code> 如下图<br><img src="https://i.loli.net/2020/12/25/IrvmR2Bw8lOHKVs.png"></p>
<h4 id="2-2-3-启用-Github-Pages-服务"><a href="#2-2-3-启用-Github-Pages-服务" class="headerlink" title="2.2.3 启用 Github Pages 服务"></a>2.2.3 启用 Github Pages 服务</h4><p>创建完成以后 进入项目的 Setting -&gt; GitHub Pages 启用 Pages 分支选 main，目录选 root 即可。<br>在项目中创建一个 <code>index.html</code>  内容填写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello,world<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>保存提交后，再直接通过 GitHub Pages 处显示的地址打开，就应该能看到 Hello World 了</p>
<p>至此 Github Pages 的准备也已经完成了，接下来就是将本地生成的静态站点推送到这个容器仓库中了。</p>
<h2 id="3-部署"><a href="#3-部署" class="headerlink" title="3. 部署"></a>3. 部署</h2><p>这边先介绍直接使用插件将本地生成的站点整体推送到远端的方案，后续直接使用语雀作为编辑端，通过 Web Hook 触发自动的同步和打包动作，完成发布的相关的内容下一篇再写吧</p>
<h3 id="3-1-部署插件的安装"><a href="#3-1-部署插件的安装" class="headerlink" title="3.1. 部署插件的安装"></a>3.1. 部署插件的安装</h3><p><a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> 是一个一键将 Hexo 生成的站点部署到 Github 的插件 安装命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后在 <code>_config.yml</code>  中配置 git 仓库的相关信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:******</span> <span class="comment"># 仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-SSH-key-配置"><a href="#3-2-SSH-key-配置" class="headerlink" title="3.2. SSH key 配置"></a>3.2. SSH key 配置</h3><p>本地生成一对 SSH key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;备注&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后将公钥放到 个人页面-&gt; Setting -&gt; SSH and GPG keys 中</p>
<h3 id="3-3-Hexo-配置修改"><a href="#3-3-Hexo-配置修改" class="headerlink" title="3.3. Hexo 配置修改"></a>3.3. Hexo 配置修改</h3><p><code>_config.yml</code>  中</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://tofunothere.github.io/blog</span> <span class="comment"># 修改为github pages 的地址，</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog/</span> <span class="comment"># 如果是使用子目录的形式，需要指定子目录</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-发布"><a href="#3-4-发布" class="headerlink" title="3.4. 发布"></a>3.4. 发布</h3><p>在博客目录下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g -d <span class="comment"># g 是generate的缩写 d 是deploy的缩写</span></span><br></pre></td></tr></table></figure>

<p>好了，现在就已经将本地静态站点发布到 GitHub 上了，通过 GitHub Pages 的链接应该可以正常访问了</p>
<h2 id="4-主题配置"><a href="#4-主题配置" class="headerlink" title="4. 主题配置"></a>4. 主题配置</h2><h3 id="4-1-Next-的安装"><a href="#4-1-Next-的安装" class="headerlink" title="4.1 Next 的安装"></a>4.1 Next 的安装</h3><p>可以直接通过 <code>git</code>  将目录 <code>clone</code>  到 <code>theme/next</code>  文件夹下，命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo站点目录</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>也可以下载 zip 包，然后解压文件到 theme 文件夹下，注意要将文件夹名改为 next<br>在站点的 <code>_config.yml</code>  配置中，修改 theme: 为 next 即可启用 next 主题</p>
<h3 id="4-2-相关插件安装及配置"><a href="#4-2-相关插件安装及配置" class="headerlink" title="4.2 相关插件安装及配置"></a>4.2 相关插件安装及配置</h3><h4 id="4-2-1-配置主题"><a href="#4-2-1-配置主题" class="headerlink" title="4.2.1.配置主题"></a>4.2.1.配置主题</h4><p>修改主题，配置侧片菜单，详情页中的导航目录</p>
<h5 id="主题-Scheme"><a href="#主题-Scheme" class="headerlink" title="主题 Scheme"></a>主题 Scheme</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h5 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position.</span></span><br><span class="line">  <span class="comment"># position: left</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Manual define the sidebar width. If commented, will be default for:</span></span><br><span class="line">  <span class="comment"># Muse | Mist: 320</span></span><br><span class="line">  <span class="comment"># Pisces | Gemini: 240</span></span><br><span class="line">  <span class="comment">#width: 300</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar Display (only for Muse | Mist), available values:</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically.</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line">  <span class="comment">#  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">post</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar padding in pixels.</span></span><br><span class="line">  <span class="attr">padding:</span> <span class="number">18</span></span><br><span class="line">  <span class="comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span></span><br><span class="line">  <span class="attr">offset:</span> <span class="number">12</span></span><br><span class="line">  <span class="comment"># Enable sidebar on narrow view (only for Muse | Mist).</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h5 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h5 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport wrap expand_all).</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-配置菜单"><a href="#4-2-2-配置菜单" class="headerlink" title="4.2.2.配置菜单"></a>4.2.2.配置菜单</h4><p>主题的 <code>_config.yml </code>  配置中修改下面的内容<br>依次为主页、分类、标签、归档、关于页面</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br></pre></td></tr></table></figure>

<p>但是仅仅取消相关页面的注释是不够的，需要创建对应的页面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page archives</span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>

<p>然后进入 source 目录下，找到对应的文件夹，修改其中的 <code>index.md</code>  内容如下</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于</span><br><span class="line">date: 2020-12-15 19:26:17</span><br><span class="line">type: &quot;about&quot; #type对应上面的目录类型</span><br><span class="line">comments: false # 关闭评论</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h4 id="4-2-3-配置搜索"><a href="#4-2-3-配置搜索" class="headerlink" title="4.2.3.配置搜索"></a>4.2.3.配置搜索</h4><p>安装本地搜索插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>编辑 Hexo 的 <code>_config.yml</code>  添加如下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>修改 Next 的 <code>_config.yml</code>  启用搜索</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-4-配置字数统计和阅读时长估计"><a href="#4-2-4-配置字数统计和阅读时长估计" class="headerlink" title="4.2.4 配置字数统计和阅读时长估计"></a>4.2.4 配置字数统计和阅读时长估计</h4><p>修改 Next 的 <code>_config.yml</code>  启用字数统计和阅读时长估计</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">mins.</span></span><br></pre></td></tr></table></figure>

<p>修改 Hexo 的 <code>_config.yml</code>  启用全站的字数统计和时长估计</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-5-配置访问统计"><a href="#4-2-5-配置访问统计" class="headerlink" title="4.2.5 配置访问统计"></a>4.2.5 配置访问统计</h4><p>修改 Next 的 <code>_config.yml</code>  启用访问统计</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring事务导致数据库主从读请求漂移的问题</title>
    <url>/yuque/Spring%E4%BA%8B%E5%8A%A1%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E8%AF%BB%E8%AF%B7%E6%B1%82%E6%BC%82%E7%A7%BB%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>日志频繁报错，内容说数据库运行在只读状态无法写入，检查主从配置，主从配置正常，只有部分写请求报错，其他写请求没有问题，出错的写请求有事务控制。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>第一是怀疑主从切换相关的代码有问题，这个主从切换的代码是使用了 Spring 提供的 AbstractRoutingDataSource 来切换数据源，简单说明实现就是通过切面，切入 DAO 层接口之前，切换数据源标示，数据源标示保存在一个 ThreadLocal 对象之中，在获取数据源链接的时候从 ThreadLocal 中取得标示，切换到对应的数据源。一开始怀疑是不是没有重置 ThreadLocal 导致的，但是分析了下代码，觉得不太像是，因为切面是切入了 dao 包下的所有接口，然后在切面中如果取不到对应注解上注明的方法，会尝试根据方法名称判定是读请求还是写请求，最后还是判定不了的话，会直接使用主库，不应该会出现线程间污染的问题。<br>分析到这里卡住了，没有什么进展，只能换个方向，如果不是我们主从切换代码的问题，只能考虑是事务的问题，因为只有添加了事务相关的几个接口有报错，没有添加的正常。<br>尝试往 Spring 的事务拦截相关的代码里跟，最后发现了坑点，下面的代码在<code>org.springframework.jdbc.datasource.DataSourceTransactionManager</code> 中<br><img src="https://i.loli.net/2020/12/25/C29zUMP5sV78dab.png"><br>在这个 <code>doBegin</code>  方法中，会首先判断上下文中是否已经保存了链接 （259 ～ 260 行）如果没有链接，则从 <code>DataSource</code>  中获取一个链接，然后保存到上下文中（261 ～ 265 行），如果已经有了 链接，则直接从上下文中获取链接。这么做到原因也很好理解，保证事务中的 sql 都是通过同一个链接执行的。然后这个坑到我们的地方就是，Spring 事务的拦截器默认是比我们的数据源切换拦截器更先执行的，而我们清理 ThreadLocal 设置默认值的地方是在切面入口处，这就导致，如果在事务的方法之前，在执行过相关查询的 sql，数据源切换到了从库，ThreadLocal 中的数据源是从库，在执行被事务管理的方法之前，会先进入事务拦截的，然后通过我们自行实现的 AbstractRoutingDataSource，返回从库的链接，保存到上下文中，然后在事务中都使用这个链接执行操作，也就产生了写请求打到从库上的现象。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>知道了问题，就好解决了，其实有很多种解决的方案，我这用了最快的一种，就是直接在我们的数据源切换切面中，在退出切面前，将数据源标示还原为主库的<br>基本就是下面这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="comment">// 依次解析 方法-&gt;类-&gt;接口上的注解，如果没有，再根据命名规则尝试判定主从</span></span><br><span class="line">    resolveDataSource(point);</span><br><span class="line">    <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 添加</span></span><br><span class="line">    DataSourcesManager.set(DataSourcesEnum.MASTER);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，问题解决了</p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>出现这个问题的原因还是对 Spring 事务管理的逻辑不是很清楚，还是要加强学习，另外就是不要相信自己方法里开始的数据初始化，认为数据不会错，鬼知道框架会做什么神奇的操作，数据用完就恢复原样，原样退出。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Mybatis</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>语雀+GithubActions实现Hexo站点自动化发布</title>
    <url>/yuque/%E8%AF%AD%E9%9B%80+GithubActions%E5%AE%9E%E7%8E%B0Hexo%E7%AB%99%E7%82%B9%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<h2 id="1-同步语雀中的文章到-Hexo-站点中"><a href="#1-同步语雀中的文章到-Hexo-站点中" class="headerlink" title="1. 同步语雀中的文章到 Hexo 站点中"></a>1. 同步语雀中的文章到 Hexo 站点中</h2><p><a href="https://github.com/x-cold/yuque-hexo">yuque-hexo</a> 是一个将语雀中特定知识库同步到 hexo 中的工具</p>
<p>通过 npm 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo</span><br><span class="line">npm install yuque-hexo --save</span><br></pre></td></tr></table></figure>

<p>然后在 Hexo 站点的 <code>package.json</code>  文件中添加</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;your hexo project&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;yuqueConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;postPath&quot;</span>: <span class="string">&quot;source/_posts/yuque&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cachePath&quot;</span>: <span class="string">&quot;yuque.json&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mdNameFormat&quot;</span>: <span class="string">&quot;title&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;adapter&quot;</span>: <span class="string">&quot;hexo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;concurrency&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;https://www.yuque.com/api/v2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;login&quot;</span>: <span class="string">&quot;用户路径&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;repo&quot;</span>: <span class="string">&quot;知识库路径&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;onlyPublished&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;onlyPublic&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数说明</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>含义</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>postPath</td>
<td>文档同步后生成的路径</td>
<td>source/_posts/yuque</td>
</tr>
<tr>
<td>cachePath</td>
<td>文档下载缓存文件</td>
<td>yuque.json</td>
</tr>
<tr>
<td>mdNameFormat</td>
<td>文件名命名方式 (title / slug)</td>
<td>title</td>
</tr>
<tr>
<td>adapter</td>
<td>文档生成格式 (hexo/markdown)</td>
<td>hexo</td>
</tr>
<tr>
<td>concurrency</td>
<td>下载文章并发数</td>
<td>5</td>
</tr>
<tr>
<td>baseUrl</td>
<td>语雀 API 地址</td>
<td>-</td>
</tr>
<tr>
<td>login</td>
<td>语雀 login (group), 也称为个人路径</td>
<td>-</td>
</tr>
<tr>
<td>repo</td>
<td>语雀仓库短名称，也称为语雀知识库路径</td>
<td>-</td>
</tr>
<tr>
<td>onlyPublished</td>
<td>只展示已经发布的文章</td>
<td>false</td>
</tr>
<tr>
<td>onlyPublic</td>
<td>只展示公开文章</td>
<td>false</td>
</tr>
</tbody></table>
<p>出于对知识库安全性的调整，使用第三方 API 访问知识库，需要传入环境变量 YUQUE_TOKEN，在语雀上点击 个人头像 -&gt; 设置 -&gt; Token 即可获取。传入 YUQUE_TOKEN 到 yuque-hexo 的进程有两种方式：</p>
<p>设置全局的环境变量 YUQUE_TOKEN<br>命令执行时传入环境变量<br>mac / linux: YUQUE_TOKEN=xxx yuque-hexo sync<br>windows: set YUQUE_TOKEN=xxx &amp;&amp; yuque-hexo sync</p>
<h2 id="2-配置-GithubActions"><a href="#2-配置-GithubActions" class="headerlink" title="2. 配置 GithubActions"></a>2. 配置 GithubActions</h2><p>在 github 中新建个仓库，将 Hexo 站点的源码整体上传上去，注意如果使用了主题，theme 文件夹中的内容也要完整上传</p>
<p>在源码仓库中，选择 Actions，新建一个 Action 脚本，内容如下，内容很简单清晰</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is a basic workflow to help you get started with Actions</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">Blog-CI</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls when the action will run.</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># main分支推送时触发</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">main</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 允许手动触发</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  <span class="comment"># 允许外部仓库事件触发</span></span><br><span class="line">  <span class="attr">repository_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># This workflow contains a single job called &quot;build&quot;</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># The type of runner that the job will run on</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 配置Node环境</span></span><br><span class="line">      <span class="comment"># Runs a single command using the runners shell</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="number">10.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;10.x&quot;</span></span><br><span class="line">      <span class="comment"># 安装 Hexo依赖</span></span><br><span class="line">      <span class="comment"># Runs a set of commands using the runners shell</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span> <span class="string">yuque-hexo</span> <span class="string">-g</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">-g</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="comment">#配置 博客仓库的推送SSH key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Deploy</span> <span class="string">Private</span> <span class="string">Key</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span> </span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$HEXO_DEPLOY_PRIVATE_KEY&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span> </span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">      <span class="comment">#配置git信息</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Git</span> <span class="string">Infomation</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&#x27;陈叔甫&#x27;</span> </span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&#x27;568115411@qq.com&#x27;</span></span><br><span class="line">      <span class="comment"># 实际部署</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">YUQUE_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.YUQUE_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">yuque-hexo</span> <span class="string">clean</span> </span><br><span class="line">          <span class="string">yuque-hexo</span> <span class="string">sync</span> </span><br><span class="line">          <span class="string">hexo</span> <span class="string">clean</span> </span><br><span class="line">          <span class="string">hexo</span> <span class="string">g</span> <span class="string">-d</span></span><br></pre></td></tr></table></figure>

<p>然后，需要在在源码仓库中配置好 sshKey 和语雀 AccessToken</p>
<p>HEXO_DEPLOY_PRIVATE_KEY<br>可以全新生成一对 SSH key，公钥放到 github 个人设置中，私钥放到博客源码仓库的 Settings-&gt;Secrets 中</p>
<p>YUQUE_TOKEN<br>在语雀上点击 个人头像 -&gt; 设置 -&gt; Token 即可获取，一样也是配置到博客源码仓库的 Settings-&gt;Secrets 中</p>
<p>配置好以后应该是下面这样<br><img src="https://i.loli.net/2020/12/25/92BepjhbqYa71ik.png"><br>现在手动执行下<br><img src="https://i.loli.net/2020/12/25/5rpiwXh8A7Vnf1o.png"></p>
<p>就已经可以自动获取到语雀的文章，并打包上传到 GithubPages 对应的仓库中了</p>
<h2 id="3-配置语雀-WebHook"><a href="#3-配置语雀-WebHook" class="headerlink" title="3. 配置语雀 WebHook"></a>3. 配置语雀 WebHook</h2><p>在知识库的设置-&gt;开发者下可以配置 WebHook，建议使用仅主动推送触发更新，这样可以控制发布的频率<br><img src="https://i.loli.net/2020/12/25/pHyNCgFf5tkSiws.png"><br>但是这个无法指定 headers，而触发 GitActions 是需要在 Headers 中设置 Github 的 accessToken 的，所以我们需要一个中转服务，这个服务很简单，就是接受到语雀的 WebHook，然后触发 GitActions ，阿里和腾讯云推出的 serverless 的函数计算服务可以很好的满足我们的需求，这两家提供的免费额度也是绝对足够我们使用了的</p>
<h2 id="4-配置函数计算服务"><a href="#4-配置函数计算服务" class="headerlink" title="4. 配置函数计算服务"></a>4. 配置函数计算服务</h2><p>我这里选择了阿里的函数计算服务<br><img src="https://i.loli.net/2020/12/25/R3SfUtoV7PdJaML.png"><br>在阿里云控制台搜索函数计算，创建一个服务，然后创建一个空白 http 函数，我这里使用的 Python 的，比较简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">HELLO_WORLD = <span class="string">b&#x27;Hello world!\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To enable the initializer feature (https://help.aliyun.com/document_detail/158208.html)</span></span><br><span class="line"><span class="comment"># please implement the initializer function as below：</span></span><br><span class="line"><span class="comment"># def initializer(context):</span></span><br><span class="line"><span class="comment">#    logger = logging.getLogger()</span></span><br><span class="line"><span class="comment">#    logger.info(&#x27;initializing&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span>(<span class="params">environ, start_response</span>):</span></span><br><span class="line">    context = environ[<span class="string">&#x27;fc.context&#x27;</span>]</span><br><span class="line">    request_uri = environ[<span class="string">&#x27;fc.request_uri&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> environ.items():</span><br><span class="line">      <span class="keyword">if</span> k.startswith(<span class="string">&#x27;HTTP_&#x27;</span>):</span><br><span class="line">        <span class="comment"># process custom request headers</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># do something here</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">&quot;https://api.github.com/repos/你的用户名/你的参数名/dispatches&quot;</span></span><br><span class="line"></span><br><span class="line">    payload=<span class="string">&quot;&#123;\&quot;event_type\&quot;:\&quot;yuque-update\&quot;&#125;&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/vnd.github.v3+json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;token github访问token&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;_octo=GH1.1.807301492.1608119379; logged_in=no&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.request(<span class="string">&quot;POST&quot;</span>, url, headers=headers, data=payload)</span><br><span class="line"></span><br><span class="line">    status = <span class="string">&#x27;200 OK&#x27;</span></span><br><span class="line">    response_headers = [(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)]</span><br><span class="line">    start_response(status, response_headers)</span><br><span class="line">    <span class="keyword">return</span> [HELLO_WORLD]</span><br></pre></td></tr></table></figure>

<p>一样的，尝试手动调试执行下，看看 GithubActions 中是否收到了仓库事件，触发了 Action</p>
<p>调试完成后找到触发器中的触发地址，配置到语雀到 webHook 地址中即可<br><img src="https://i.loli.net/2020/12/25/MT9xw8Bqgb5uIRE.png"></p>
<h2 id="5-试一试"><a href="#5-试一试" class="headerlink" title="5. 试一试"></a>5. 试一试</h2><p>现在，在语雀里写一篇文档，文档开头最好是这样的，便于 Hexo 生成相关信息</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">tags: [Hexo, Github]</span><br><span class="line">categories: [Blog]</span><br><span class="line">description: 之前通过 Github Pages 和 Hexo 搭建了个人博客站点，但是管理起来还是有些复杂，需要手动部署，在移动端也不好管理，通过搜寻资料，发现并实现了通过语雀+GithubActions 实现自动化的静态站点更新发布的功能</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>然后点击更新，同时勾选上“文档有较大更新，推送给关注知识库的人”。<br><img src="https://i.loli.net/2020/12/25/OkH8oh1qp3yXfId.png"><br>整个自动化的链路就启动了</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>2-SAT问题</title>
    <url>/old/2-SAT%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="【2-SAT问题】"><a href="#【2-SAT问题】" class="headerlink" title="【2-SAT问题】"></a>【2-SAT问题】</h2><hr>
<p>现有一个由N个布尔值组成的序列A，给出一些限制关系，比如A[x] AND A[y]=0、A[x] OR A[y] OR A[z]=1等，要确定A[0..N-1]的值，使得其满足所有限制关系。这个称为SAT问题，特别的，若每种限制关系中最多只对两个元素进行限制，则称为2-SAT问题。</p>
<hr>
<p>由于在2-SAT问题中，最多只对两个元素进行限制，所以可能的限制关系共有11种：</p>
<blockquote>
<p>A[x]<br>NOT A[x]<br>A[x] AND A[y]<br>A[x] AND NOT A[y]<br>A[x] OR A[y]<br>A[x] OR NOT A[y]<br>NOT (A[x] AND A[y])<br>NOT (A[x] OR A[y])<br>A[x] XOR A[y]<br>NOT (A[x] XOR A[y])<br>A[x] XOR NOT A[y]</p>
</blockquote>
<p>进一步，A[x] AND A[y]相当于(A[x]) AND (A[y])（也就是可以拆分成A[x]与A[y]两个限制关系），NOT(A[x] OR A[y])相当于NOT A[x] AND NOT A[y]（也就是可以拆分成NOT A[x]与NOT A[y]两个限制关系）。因此，可能的限制关系最多只有9种。</p>
<p>在实际问题中，2-SAT问题在大多数时候表现成以下形式：有N对物品，每对物品中必须选取一个，也只能选取一个，并且它们之间存在某些限制关系（如某两个物品不能都选，某两个物品不能都不选，某两个物品必须且只能选一个，某个物品必选）等，这时，可以将每对物品当成一个布尔值（选取第一个物品相当于0，选取第二个相当于1），如果所有的限制关系最多只对两个物品进行限制，则它们都可以转化成9种基本限制关系，从而转化为2-SAT模型。</p>
<h3 id="【建模】"><a href="#【建模】" class="headerlink" title="【建模】"></a>【建模】</h3><p>其实2-SAT问题的建模是和实际问题非常相似的。<br>建立一个2N阶的有向图，其中的点分为N对，每对点表示布尔序列A的一个元素的0、1取值（以下将代表A[i]的0取值的点称为i，代表A[i]的1取值的点称为i’）。显然每对点必须且只能选取一个。然后，图中的边具有特定含义。若图中存在边&lt;i, j&gt;，则表示若选了i必须选j。可以发现，上面的9种限制关系中，后7种二元限制关系都可以用连边实现，比如NOT(A[x] AND A[y])需要连两条边&lt;x, y’&gt;和&lt;y, x’&gt;，A[x] OR A[y]需要连两条边&lt;x’, y&gt;和&lt;y’, x&gt;。而前两种一元关系，对于A[x]（即x必选），可以通过连边&lt;x’, x&gt;来实现，而NOT A[x]（即x不能选），可以通过连边&lt;x, x’&gt;来实现。</p>
<hr>
<h3 id="【O-NM-算法：求字典序最小的解】"><a href="#【O-NM-算法：求字典序最小的解】" class="headerlink" title="【O(NM)算法：求字典序最小的解】"></a>【O(NM)算法：求字典序最小的解】</h3><p>根据2-SAT建成的图中边的定义可以发现，若图中i到j有路径，则若i选，则j也要选；或者说，若j不选，则i也不能选；<br>因此得到一个很直观的算法：</p>
<blockquote>
<p>（1）给每个点设置一个状态V，V=0表示未确定，V=1表示确定选取，V=2表示确定不选取。称一个点是已确定的当且仅当其V值非0。设立两个队列Q1和Q2，分别存放本次尝试选取的点的编号和尝试不选的点的编号。<br>（2）若图中所有的点均已确定，则找到一组解，结束，否则，将Q1、Q2清空，并任选一个未确定的点i，将i加入队列Q1，将i’加入队列Q2；<br>（3）找到i的所有后继。对于后继j，若j未确定，则将j加入队列Q1；若j’（这里的j’是指与j在同一对的另一个点）未确定，则将j’加入队列Q2；<br>（4）遍历Q2中的每个点，找到该点的所有前趋（这里需要先建一个补图），若该前趋未确定，则将其加入队列Q2；<br>（5）在（3）（4）步操作中，出现以下情况之一，则本次尝试失败，否则本次尝试成功：</p>
<blockquote>
<p>&lt;1&gt;某个已被加入队列Q1的点被加入队列Q2；<br>&lt;2&gt;某个已被加入队列Q2的点被加入队列Q1;<br>&lt;3&gt;某个j的状态为2；<br>&lt;4&gt;某个i’或j’的状态为1或某个i’或j’的前趋的状态为1；</p>
</blockquote>
</blockquote>
<blockquote>
<p>（6）若本次尝试成功，则将Q1中的所有点的状态改为1，将Q2中所有点的状态改为2，转（2），否则尝试点i’，若仍失败则问题无解。<br>该算法的时间复杂度为O(NM)（最坏情况下要尝试所有的点，每次尝试要遍历所有的边），但是在多数情况下，远远达不到这个上界。<br>具体实现时，可以用一个数组vst来表示队列Q1和Q2。设立两个标志变量i1和i2（要求对于不同的i，i1和i2均不同，这样可以避免每次尝试都要初始化一次，节省时间），若vst[i]=i1则表示i已被加入Q1，若vst[i]=i2则表示i已被加入Q2。不过Q1和Q2仍然是要设立的，因为遍历（BFS）的时候需要队列，为了防止重复遍历，加入Q1（或Q2）中的点的vst值必然不等于i1（或i2）。中间一旦发生矛盾，立即中止尝试，宣告失败。</p>
</blockquote>
<p>该算法虽然在多数情况下时间复杂度到不了O(NM)，但是综合性能仍然不如下面的O(M)算法。不过，该算法有一个很重要的用处：求字典序最小的解！<br>如果原图中的同一对点编号都是连续的（01、23、45……）则可以依次尝试第0对、第1对……点，每对点中先尝试编号小的，若失败再尝试编号大的。这样一定能求出字典序最小的解（如果有解的话），因为一个点一旦被确定，则不可更改。<br>如果原图中的同一对点编号不连续（比如03、25、14……）则按照该对点中编号小的点的编号递增顺序将每对点排序，然后依次扫描排序后的每对点，先尝试其编号小的点，若成功则将这个点选上，否则尝试编号大的点，若成功则选上，否则（都失败）无解。</p>
<hr>
<h4 id="【具体题目】HDU1814（求字典序最小的解）"><a href="#【具体题目】HDU1814（求字典序最小的解）" class="headerlink" title="【具体题目】HDU1814（求字典序最小的解）"></a>【具体题目】HDU1814（求字典序最小的解）</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">HDU <span class="number">1814</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">HDU 1814</span></span><br><span class="line"><span class="comment">求出字典序最小的解</span></span><br><span class="line"><span class="comment">C++ 2652ms 2316K</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">16010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM=<span class="number">100000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,pre,next;</span><br><span class="line">&#125;E[MAXM],E2[MAXM];</span><br><span class="line"><span class="keyword">int</span> _n,n,m;</span><br><span class="line"><span class="keyword">int</span> V[MAXN],ST[MAXN][<span class="number">2</span>],Q[MAXN],Q2[MAXN],vst[MAXN];</span><br><span class="line"><span class="keyword">bool</span> res_ex;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_d</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">      E[i].a=E[i].pre=E[i].next=E2[i].a=E2[i].pre=E2[i].next=i;</span><br><span class="line">    m=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[m].a=a;E[m].b=b;E[m].pre=E[a].pre;E[m].next=a;E[a].pre=m;E[E[m].pre].next=m;</span><br><span class="line">    E2[m].a=b;E2[m].b=a;E2[m].pre=E2[b].pre;E2[m].next=b;E2[b].pre=m;E2[E2[m].pre].next=m;</span><br><span class="line">    m++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        V[i]=<span class="number">0</span>;</span><br><span class="line">        vst[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res_ex=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i,i1,i2,j,k,front,rear,front2,rear2;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">bool</span> ff;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> _i=<span class="number">0</span>;_i&lt;_n;_i++)</span><br><span class="line">    &#123;<span class="comment">//2</span></span><br><span class="line">        <span class="keyword">if</span>(V[_i&lt;&lt;<span class="number">1</span>]==<span class="number">1</span>||V[(_i&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>]==<span class="number">1</span>)<span class="keyword">continue</span>;<span class="comment">//找一对未确定的点</span></span><br><span class="line">        i=_i&lt;&lt;<span class="number">1</span>;len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!V[i])</span><br><span class="line">        &#123;<span class="comment">//3</span></span><br><span class="line">            ST[len][<span class="number">0</span>]=i;</span><br><span class="line">            ST[len++][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!V[i^<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                ST[len][<span class="number">0</span>]=i^<span class="number">1</span>;</span><br><span class="line">                ST[len++][<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Q[front=rear=<span class="number">0</span>]=i;</span><br><span class="line">            vst[i]=i1=n+i;</span><br><span class="line">            Q2[front2=rear2=<span class="number">0</span>]=i^<span class="number">1</span>;</span><br><span class="line">            vst[i^<span class="number">1</span>]=i2=(n&lt;&lt;<span class="number">1</span>)+i;</span><br><span class="line">            ff=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(;front&lt;=rear;front++)</span><br><span class="line">            &#123;<span class="comment">//4</span></span><br><span class="line">                j=Q[front];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> p=E[j].next;p!=j;p=E[p].next)</span><br><span class="line">                &#123;<span class="comment">//5</span></span><br><span class="line">                    k=E[p].b;</span><br><span class="line">                    <span class="keyword">if</span>(V[k]==<span class="number">2</span>||vst[k]==i2||V[k^<span class="number">1</span>]==<span class="number">1</span>||vst[k^<span class="number">1</span>]==i1)</span><br><span class="line">                    &#123;ff=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">                    <span class="keyword">if</span>(vst[k]!=i1)</span><br><span class="line">                    &#123;<span class="comment">//6</span></span><br><span class="line">                        Q[++rear]=k;vst[k]=i1;</span><br><span class="line">                        <span class="keyword">if</span>(!V[k])</span><br><span class="line">                        &#123;</span><br><span class="line">                            ST[len][<span class="number">0</span>]=k;</span><br><span class="line">                            ST[len++][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="comment">//6</span></span><br><span class="line">                    <span class="keyword">if</span>(vst[k^<span class="number">1</span>]!=i2)</span><br><span class="line">                    &#123;<span class="comment">//6</span></span><br><span class="line">                        Q2[++rear2]=k^<span class="number">1</span>;vst[k^<span class="number">1</span>]=i2;</span><br><span class="line">                        <span class="keyword">if</span>(!V[k])</span><br><span class="line">                        &#123;</span><br><span class="line">                            ST[len][<span class="number">0</span>]=k^<span class="number">1</span>;</span><br><span class="line">                            ST[len++][<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="comment">//6</span></span><br><span class="line">                &#125;<span class="comment">//5</span></span><br><span class="line">                <span class="keyword">if</span>(!ff)<span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="comment">//4</span></span><br><span class="line">            <span class="keyword">if</span>(ff)</span><br><span class="line">            &#123;<span class="comment">//4</span></span><br><span class="line">                <span class="keyword">for</span>(;front2&lt;=rear2;front2++)</span><br><span class="line">                &#123;<span class="comment">//5</span></span><br><span class="line">                    j=Q2[front2];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> p=E2[j].next;p!=j;p=E2[p].next)</span><br><span class="line">                    &#123;<span class="comment">//6</span></span><br><span class="line">                        k=E2[p].b;</span><br><span class="line">                        <span class="keyword">if</span>(V[k]==<span class="number">1</span>||vst[k]==i1)</span><br><span class="line">                        &#123;ff=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">                        <span class="keyword">if</span>(vst[k]!=i2)</span><br><span class="line">                        &#123;</span><br><span class="line">                            vst[k]=i2;Q2[++rear]=k;</span><br><span class="line">                            <span class="keyword">if</span>(!V[k])</span><br><span class="line">                            &#123;</span><br><span class="line">                                ST[len][<span class="number">0</span>]=k;</span><br><span class="line">                                ST[len++][<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="comment">//6</span></span><br><span class="line">                    <span class="keyword">if</span>(!ff)<span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="comment">//5</span></span><br><span class="line">                <span class="keyword">if</span>(ff)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)V[ST[j][<span class="number">0</span>]]=ST[j][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//4</span></span><br><span class="line">        &#125;<span class="comment">//3</span></span><br><span class="line">        i=(_i&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>;len=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//********************************************</span></span><br><span class="line"><span class="comment">//下面这段和上面完全一样的，可以复制。但是要保证上面写对</span></span><br><span class="line"><span class="comment">//********************************************</span></span><br><span class="line">        <span class="keyword">if</span>(!V[i])</span><br><span class="line">        &#123;<span class="comment">//3</span></span><br><span class="line">            ST[len][<span class="number">0</span>]=i;</span><br><span class="line">            ST[len++][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!V[i^<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                ST[len][<span class="number">0</span>]=i^<span class="number">1</span>;</span><br><span class="line">                ST[len++][<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Q[front=rear=<span class="number">0</span>]=i;</span><br><span class="line">            vst[i]=i1=n+i;</span><br><span class="line">            Q2[front2=rear2=<span class="number">0</span>]=i^<span class="number">1</span>;</span><br><span class="line">            vst[i^<span class="number">1</span>]=i2=(n&lt;&lt;<span class="number">1</span>)+i;</span><br><span class="line">            ff=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(;front&lt;=rear;front++)</span><br><span class="line">            &#123;<span class="comment">//4</span></span><br><span class="line">                j=Q[front];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> p=E[j].next;p!=j;p=E[p].next)</span><br><span class="line">                &#123;<span class="comment">//5</span></span><br><span class="line">                    k=E[p].b;</span><br><span class="line">                    <span class="keyword">if</span>(V[k]==<span class="number">2</span>||vst[k]==i2||V[k^<span class="number">1</span>]==<span class="number">1</span>||vst[k^<span class="number">1</span>]==i1)</span><br><span class="line">                    &#123;ff=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">                    <span class="keyword">if</span>(vst[k]!=i1)</span><br><span class="line">                    &#123;<span class="comment">//6</span></span><br><span class="line">                        Q[++rear]=k;vst[k]=i1;</span><br><span class="line">                        <span class="keyword">if</span>(!V[k])</span><br><span class="line">                        &#123;</span><br><span class="line">                            ST[len][<span class="number">0</span>]=k;</span><br><span class="line">                            ST[len++][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="comment">//6</span></span><br><span class="line">                    <span class="keyword">if</span>(vst[k^<span class="number">1</span>]!=i2)</span><br><span class="line">                    &#123;<span class="comment">//6</span></span><br><span class="line">                        Q2[++rear2]=k^<span class="number">1</span>;vst[k^<span class="number">1</span>]=i2;</span><br><span class="line">                        <span class="keyword">if</span>(!V[k])</span><br><span class="line">                        &#123;</span><br><span class="line">                            ST[len][<span class="number">0</span>]=k^<span class="number">1</span>;</span><br><span class="line">                            ST[len++][<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="comment">//6</span></span><br><span class="line">                &#125;<span class="comment">//5</span></span><br><span class="line">                <span class="keyword">if</span>(!ff)<span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="comment">//4</span></span><br><span class="line">            <span class="keyword">if</span>(ff)</span><br><span class="line">            &#123;<span class="comment">//4</span></span><br><span class="line">                <span class="keyword">for</span>(;front2&lt;=rear2;front2++)</span><br><span class="line">                &#123;<span class="comment">//5</span></span><br><span class="line">                    j=Q2[front2];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> p=E2[j].next;p!=j;p=E2[p].next)</span><br><span class="line">                    &#123;<span class="comment">//6</span></span><br><span class="line">                        k=E2[p].b;</span><br><span class="line">                        <span class="keyword">if</span>(V[k]==<span class="number">1</span>||vst[k]==i1)</span><br><span class="line">                        &#123;ff=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">                        <span class="keyword">if</span>(vst[k]!=i2)</span><br><span class="line">                        &#123;</span><br><span class="line">                            vst[k]=i2;Q2[++rear]=k;</span><br><span class="line">                            <span class="keyword">if</span>(!V[k])</span><br><span class="line">                            &#123;</span><br><span class="line">                                ST[len][<span class="number">0</span>]=k;</span><br><span class="line">                                ST[len++][<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="comment">//6</span></span><br><span class="line">                    <span class="keyword">if</span>(!ff)<span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="comment">//5</span></span><br><span class="line">                <span class="keyword">if</span>(ff)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)V[ST[j][<span class="number">0</span>]]=ST[j][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//4</span></span><br><span class="line">        &#125;<span class="comment">//3</span></span><br><span class="line"><span class="comment">//**************************************************************</span></span><br><span class="line">        <span class="keyword">if</span>(V[_i&lt;&lt;<span class="number">1</span>]+V[(_i&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>]!=<span class="number">3</span>)&#123;res_ex=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;<span class="comment">//2</span></span><br><span class="line">&#125;<span class="comment">//1</span></span><br><span class="line"><span class="comment">//点的编号必须从0开始，2*i和2*i+1是一对sat</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;_n,&amp;M)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        n=_n&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        init_d();</span><br><span class="line">        <span class="keyword">while</span>(M--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">            x--;</span><br><span class="line">            y--;</span><br><span class="line">            <span class="keyword">if</span>(x!=(y^<span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                add_edge(x,y^<span class="number">1</span>);</span><br><span class="line">                add_edge(y,x^<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        solve();</span><br><span class="line">        <span class="keyword">if</span>(res_ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//V为0为不确定，1为确定选择，2为确定不选择</span></span><br><span class="line">            <span class="keyword">if</span>(V[i]==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NIE\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="【O-M-算法】"><a href="#【O-M-算法】" class="headerlink" title="【O(M)算法】"></a>【O(M)算法】</h3><p>根据图的对称性，可以将图中所有的强连通分支全部缩成一个点（因为强连通分支中的点要么都选，要么都不选），然后按照拓扑逆序（每次找出度为0的点，具体实现时，在建分支邻接图时将所有边取反）遍历分支邻接图，将这个点（表示的连通分支）选上，并将其所有对立点（注意，连通分支的对立连通分支可能有多个，若对于两个连通分支S1和S2，点i在S1中，点i’在S2中，则S1和S2对立）及这些对立点的前趋全部标记为不选，直到所有点均标记为止。这一过程中必然不会出现矛盾（详细证明过程省略，论文里有）。<br>无解判定：若求出所有强分支后，存在点i和i’处于同一个分支，则无解，否则必定有解。<br>时间复杂度：求强分支时间复杂度为O(M)，拓扑排序的时间复杂度O(M)，总时间复杂度为O(M)。</p>
<p>该算法的时间复杂度低，但是只能求出任意一组解，不能保证求出解的字典序最小。当然，如果原题不需要求出具体的解，只需要判定是否有解（有的题是二分 + 2-SAT判有解的），当然应该采用这种算法，只要求强连通分支（Kosaraju、Tarjan均可，推荐后者）即可。</p>
<hr>
<h4 id="【具体题目】PKU3648（本题的特殊情况非常多，具体见Discuss）"><a href="#【具体题目】PKU3648（本题的特殊情况非常多，具体见Discuss）" class="headerlink" title="【具体题目】PKU3648（本题的特殊情况非常多，具体见Discuss）"></a>【具体题目】PKU3648（本题的特殊情况非常多，具体见Discuss）</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">POJ <span class="number">3648</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">POJ 3648</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">【题意】：有一对新人结婚，邀请n对夫妇去参加婚礼。</span></span><br><span class="line"><span class="comment">有一张很长的桌子，人只能坐在桌子的两边，还要满</span></span><br><span class="line"><span class="comment">足下面的要求：1.每对夫妇不能坐在同一侧 2.n对夫妇</span></span><br><span class="line"><span class="comment">之中可能有通奸关系（包括男男，男女，女女），有通</span></span><br><span class="line"><span class="comment">奸关系的不能同时坐在新娘的对面，可以分开坐，可以</span></span><br><span class="line"><span class="comment">同时坐在新娘这一侧。如果存在一种可行的方案，输出</span></span><br><span class="line"><span class="comment">与新娘同侧的人。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出任意一组解，点的编号从0~2n-1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">AC</span></span><br><span class="line"><span class="comment">G++ 16ms  724K</span></span><br><span class="line"><span class="comment">取和新郎同一侧的，输出的时候反一下就变成和新娘同一侧的了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">200</span>;<span class="comment">//</span></span><br><span class="line"><span class="keyword">char</span> color[MAXN];<span class="comment">//染色</span></span><br><span class="line"><span class="keyword">bool</span> visit[MAXN];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q1,q2;</span><br><span class="line"><span class="comment">//vector建图方法很妙</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;adj; <span class="comment">//原图    //中间一定要加空格把两个&#x27;&gt;&#x27;隔开</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;radj;<span class="comment">//逆图</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;dag;<span class="comment">//缩点后的逆向DAG图</span></span><br><span class="line"><span class="keyword">int</span> n,m,cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> id[MAXN],order[MAXN],ind[MAXN];<span class="comment">//强连通分量，访问顺序，入度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visit[u]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> i,len=adj[u].size();</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">      <span class="keyword">if</span>(!visit[adj[u][i]])</span><br><span class="line">        dfs(adj[u][i]);</span><br><span class="line">    order[cnt++]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rdfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visit[u]=<span class="literal">true</span>;</span><br><span class="line">    id[u]=cnt;</span><br><span class="line">    <span class="keyword">int</span> i,len=radj[u].size();</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">      <span class="keyword">if</span>(!visit[radj[u][i]])</span><br><span class="line">        rdfs(radj[u][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">korasaju</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">memset</span>(visit,<span class="literal">false</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">    <span class="keyword">for</span>(cnt=<span class="number">0</span>,i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n;i++)</span><br><span class="line">      <span class="keyword">if</span>(!visit[i])</span><br><span class="line">        dfs(i);</span><br><span class="line">    <span class="built_in">memset</span>(id,<span class="number">0</span>,<span class="keyword">sizeof</span>(id));</span><br><span class="line">    <span class="built_in">memset</span>(visit,<span class="literal">false</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">    <span class="keyword">for</span>(cnt=<span class="number">0</span>,i=<span class="number">2</span>*n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">      <span class="keyword">if</span>(!visit[order[i]])</span><br><span class="line">      &#123;</span><br><span class="line">          cnt++;<span class="comment">//这个一定要放前面来</span></span><br><span class="line">          rdfs(order[i]);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solvable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">      <span class="keyword">if</span>(id[<span class="number">2</span>*i]==id[<span class="number">2</span>*i+<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,len,now,p,pid;</span><br><span class="line">    <span class="keyword">while</span>(!q1.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        now=q1.front();</span><br><span class="line">        q1.pop();</span><br><span class="line">        <span class="keyword">if</span>(color[now]!=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">        color[now]=<span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">        ind[now]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(id[i]==now)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//p=(i%2)?i+1:i-1;//点的编号从0开始以后这一定要修改</span></span><br><span class="line">                p=i^<span class="number">1</span>;</span><br><span class="line">                pid=id[p];</span><br><span class="line">                q2.push(pid);</span><br><span class="line">                <span class="keyword">while</span>(!q2.empty())</span><br><span class="line">                &#123;</span><br><span class="line">                    pid=q2.front();</span><br><span class="line">                    q2.pop();</span><br><span class="line">                    <span class="keyword">if</span>(color[pid]==<span class="string">&#x27;B&#x27;</span>)<span class="keyword">continue</span>;</span><br><span class="line">                    color[pid]=<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">                    len=dag[pid].size();</span><br><span class="line">                    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len;j++)</span><br><span class="line">                        q2.push(dag[pid][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        len=dag[now].size();</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ind[dag[now][i]]--;</span><br><span class="line">            <span class="keyword">if</span>(ind[dag[now][i]]==<span class="number">0</span>)</span><br><span class="line">              q1.push(dag[now][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">char</span> c1,c2;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        adj.assign(<span class="number">2</span>*n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        radj.assign(<span class="number">2</span>*n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%c%d%c&quot;</span>,&amp;x,&amp;c1,&amp;y,&amp;c2);</span><br><span class="line">            <span class="keyword">if</span>(c1==<span class="string">&#x27;w&#x27;</span>)x=<span class="number">2</span>*x;</span><br><span class="line">            <span class="keyword">else</span> x=<span class="number">2</span>*x+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(c2==<span class="string">&#x27;w&#x27;</span>)y=<span class="number">2</span>*y;</span><br><span class="line">            <span class="keyword">else</span> y=<span class="number">2</span>*y+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x!=(y^<span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                adj[x].push_back(y^<span class="number">1</span>);</span><br><span class="line">                adj[y].push_back(x^<span class="number">1</span>);</span><br><span class="line">                radj[y^<span class="number">1</span>].push_back(x);</span><br><span class="line">                radj[x^<span class="number">1</span>].push_back(y);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        adj[<span class="number">0</span>].push_back(<span class="number">1</span>);</span><br><span class="line">        radj[<span class="number">1</span>].push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//加一条新娘到新郎的边。</span></span><br><span class="line">        <span class="comment">//表示选了新娘必选新郎，这样如果选了新娘就会判断无解。</span></span><br><span class="line">        <span class="comment">//这样选出来的组合必定是有新郎的，即和新郎坐在同一侧的</span></span><br><span class="line">        korasaju();</span><br><span class="line">        <span class="keyword">if</span>(!solvable())<span class="built_in">printf</span>(<span class="string">&quot;bad luck\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            dag.assign(cnt+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">            <span class="built_in">memset</span>(ind,<span class="number">0</span>,<span class="keyword">sizeof</span>(ind));</span><br><span class="line">            <span class="built_in">memset</span>(color,<span class="number">0</span>,<span class="keyword">sizeof</span>(color));</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                len=adj[i].size();</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len;j++)</span><br><span class="line">                  <span class="keyword">if</span>(id[i]!=id[adj[i][j]])</span><br><span class="line">                  &#123;</span><br><span class="line">                      dag[id[adj[i][j]]].push_back(id[i]);</span><br><span class="line">                      ind[id[i]]++;</span><br><span class="line">                  &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">              <span class="keyword">if</span>(ind[i]==<span class="number">0</span>)</span><br><span class="line">                 q1.push(i);</span><br><span class="line">            topsort();</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)<span class="comment">//小心别写错，是color[id[</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(color[id[<span class="number">2</span>*i]]==<span class="string">&#x27;R&#x27;</span>)<span class="built_in">printf</span>(<span class="string">&quot;%dh&quot;</span>,i);<span class="comment">//选取的是和新郎同一侧的，输出和新娘同一侧的</span></span><br><span class="line">                                             <span class="comment">//所以输出的时候h和w换一下</span></span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%dw&quot;</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
